name: Linux build

on: [push, pull_request]

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: 
          - 'ubuntu-latest'
          - 'macos-latest'
          - 'windows-latest'
        release:
          - latest
          - 'beta-01'
                
    steps:
         
    - uses: actions/checkout@v2
      
    - name: Set Windows Path
      run: |
        xx=$( perl <<EOM 
          print "hello world ${{ matrix.release }}\n";
        EOM
        )
        echo MATCH $xx
      shell: bash

    - name: Set Windows Path
      run: |
        xx=$( perl <<EOM 
                 
            #!/usr/bin/perl

            use strict;
            use warnings;

            my %mapping = ( macos => "macos",
                            ubuntu => "linux",
                            windows => "win") ;

            my $os = '${{ matrix.os }}' ;
            my $version = '${{ matrix.release }}' ;

            $os =~ s/-.+$//;

            die "Unknown os $os\n"
                if ! $mapping{$os} ;


            if (lc $version ne 'latest')
            {
                print "$version\n" ;
                exit;
            }

            my $url = "https://rakudo.org/downloads/rakudo" ;

            my %versions;

            my @data = `curl -q $url 2>/dev/null` ;

            for my $line (@data)
            {
                #   <a href="/dl/rakudo/rakudo-moar-2020.06-01-linux-x86_64.tar.gz"
                next
                    unless $line =~ m#<a href="/dl/rakudo/rakudo-moar-([\d\.-]+?)-$os-x86_64#;

                my $keep = $1;
                my $sortable = $1;

                $sortable =~ s/\.-//g;

                # print "$keep => $sortable\n";

                $versions{$sortable} = $keep;
            }

            print $versions{ (sort keys %versions)[-1] } . "\n";
                      
        EOM
        )
        echo MATCH $xx
      shell: bash
        
                   
    - name: Set Linux/MacOS Path
      if: ${{ startsWith(matrix.os, 'windows') }}
      run: |
        mkdir fred
        cd fred
        echo abc >def
        $a = $( ls -Name )
        echo "::set-env name=FILENAME::$a" 

    - name: GET FILENAME
      if: ${{ startsWith(matrix.os, 'windows') }}
      run: |
        echo "FILENAME $FILENAME"
        echo "FN ${{ env.FILENAME }}"
        
        
                
    - name: Set Linux/MacOS Path
      if: ${{ ! startsWith(matrix.os, 'windows') }}
      run: |
        echo "::set-env name=INSTALL_PATH::$HOME/${{ matrix.os }}.${{ matrix.release }}"     
        BASEV=`echo ${{ matrix.release }} | sed -e 's/-.*$//' `          
        echo "BASEV is $BASEV"
        echo "::set-env name=INSTALL_PATH_BASE::$BASEV"      
        echo PATH = $PATH          
        echo INSTALL_PATH_BASE=${{ env.INSTALL_PATH_BASE }}
        echo INSTALL_PATH_BASE=$INSTALL_PATH_BASE
        
    - name: Show
      run: |
        echo INSTALL_PATH_BASE $INSTALL_PATH_BASE
        echo INSTALL_PATH $INSTALL_PATH        
        echo RELEASE ${{ matrix.release }}
        echo INSTALL_PATH ${{ env.INSTALL_PATH }}
    
        
        
    - name: env
      run: |
        env | grep INSTALL_PATH
        env | grep INSTALL_PATH_BASE
      
    - name: Check Cache
      id: my-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.INSTALL_PATH }}
        key: ${{ matrix.release }}x
     
#     - name: Install 
#       if: ${{ ! startsWith(matrix.os, 'windows') && steps.my-cache.outputs.cache-hit != 'true' }}
#       run: |
#         mkdir $INSTALL_PATH
#         echo abc >$INSTALL_PATH/token

    - name: Install 
      if:  steps.my-cache.outputs.cache-hit != 'true' 
      run: |
        mkdir ${{ env.INSTALL_PATH }}
        cd ${{ env.INSTALL_PATH }}
        echo INSTALL_PATH_BASE is ${{ env.INSTALL_PATH_BASE }} >token
        
    - name: Work
      run: |
        cd ${{ env.INSTALL_PATH }}
        $a
        echo token contains:
        cat token
        echo this is ${{ matrix.os }} ${{ matrix.release }}

    
