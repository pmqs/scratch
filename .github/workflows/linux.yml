name: Linux build

on: [push, pull_request]

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: 
          - 'ubuntu-latest'
          - 'macos-latest'
          - 'windows-latest'
        release:
          - latest
          - 2020.05.1-01
          - 2020
                
    steps:
         
    - uses: actions/checkout@v2

    - name: Set Raku install Path in Windows format
      if: ${{ startsWith(matrix.os, 'windows') }}
      run: |
        prove.bat --version 
        
    - name: Set Windows Path
      if: ${{ ! startsWith(matrix.os, 'windows') }}
      run: |
        prove --version
      shell: bash

    - name: Check Raku version
      run: |
        RakuVersion=$( perl - ${{ matrix.os }} ${{ matrix.release }} <<'EOM'


            use strict;
            use warnings;

            my %os_mapping = ( macos   => 'macos',
                               ubuntu  => 'linux',
                               windows => 'win'
                             ) ;

            my $os = shift ;
            my $version = shift ;

            $os =~ s/-.+$//;

            die "Unknown OS $os\n"
                if ! $os_mapping{$os} ;

            my %available;
            my @available;
            my @data = `curl -s --connect-timeout 5 https://rakudo.org/downloads/rakudo 2>/dev/null` ;

            die "Cannot fetch versions: $@\n"
                if $@;

            # get available versions for requested OS
            for my $line (@data)
            {
                next
                    unless $line =~ m#<a href=./dl/rakudo/rakudo-moar-([\d\.-]+?)-$os_mapping{$os}-x86_64#;

                push @available, $1;
            }

            my $max = 0;

            map { $max = $max < $_ ? $_ : $max }
            map { scalar split /\D+/, $_ }
            @available ;

            for my $v (@available)
            {
                my @bits = split /\D+/, $v ;
                push @bits, 0 for @bits .. $max ;
                my $numeric = join '', map { sprintf "%04d", $_ } @bits ;

                $available{$numeric} = $v;
            }

            if (lc $version eq 'latest')
            {
                print $available{ (sort keys %available)[-1] } . "\n";
            }
            else
            {
                my @got = grep { ! index $_, $version }
                          map  { $available{ $_ }     }
                          sort { $b <=> $a            }
                          keys %available ;

                die "Cannot find Raku version $version for $os\n"
                    if ! @got;

                print "$got[0]\n" ;
            }
            
        EOM
        )
        echo MATCH $RakuVersion
        echo "::set-env name=RAKU_VERSION::$RakuVersion"         

      shell: bash

    - name: Set Windows Path for ${{ env.RAKU_VERSION }}
      run: |
          echo VERSION ${{ env.RAKU_VERSION }}
      shell: bash
